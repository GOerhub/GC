{"mappings":"AAAA,SAAS,SAAS,GAAG;IACjB,kCAAkC;IAClC,UAAU,EAAE,CAAC;IACb,2BAA2B;IAC3B,WAAW,EAAE,CAAC;CACjB;AACD,SAAS,UAAU,GAAG;IAClB,gBAAgB;IAChB,IAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,CAAE;QACrC,YAAY;QACZ,IAAI,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,AAAC;QACpB,yBAAyB;QACzB,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACzB,qCAAqC;QACrC,QAAQ,CAAC,OAAO,EAAE,CAAC;KACpB;IACD,OAAO;IACP,KAAK,GAAG,EAAE,CAAC;IACX,KAAK,GAAG,EAAE,CAAC;CACd;AACD,SAAS,WAAW,GAAG;IACjB,8BAA8B;IAE9B,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,EAAC,CAAC,EAAC,CAAC,CAAC,AAAC;IACzC,IAAI,QAAQ,GAAG,IAAI,KAAK,CAAC,iBAAiB,CAAE;QAAC,KAAK,EAAE,QAAQ;KAAC,CAAE,AAAC;IAChE,IAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,MAAM,GAAC,EAAE,EAAC,CAAC,EAAE,CAAC;QACvB,IAAI,OAAO,GAAG,EAAE,AAAC;QACjB,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACrB,IAAI,IAAI,CAAC,GAAC,CAAC,EAAC,CAAC,GAAC,MAAM,GAAC,EAAE,EAAC,CAAC,EAAE,CAAC;YACxB,IAAI,IAAI,GAAC,SAAS,CAAC,CAAC,EAAC,CAAC,CAAC,AAAC;YACxB,IAAG,IAAI,GAAC,IAAI,EACR,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAEhB,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEpB,IAAG,IAAI,IAAE,IAAI,EAAC;gBACV,IAAI,IAAI,GAAG,IAAI,KAAK,CAAC,IAAI,CAAE,QAAQ,EAAE,QAAQ,CAAE,AAAC;gBAChD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,GAAC,CAAC,GAAC,MAAM,GAAC,CAAC,GAAC,CAAC,EAAC,CAAC,EAAC,EAAE,GAAC,CAAC,GAAC,MAAM,GAAC,CAAC,GAAC,CAAC,CAAC,CAAC;gBACrD,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;gBAChB,eAAe;gBACf,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACpB;SACJ;KACJ;CACV","sources":["functions/RandomMap.js"],"sourcesContent":["function randomMap() {\r\n    // 先调用clearCubes函数来清除上一次在场景中添加的立方体\r\n    clearCubes();\r\n    // 再调用createCubes函数来创建新的立方体\r\n    createCubes();\r\n}\r\nfunction clearCubes() {\r\n    // 遍历数组中的每个立方体对象\r\n    for (var i = 0; i < cubes.length; i++) {\r\n      // 获取当前立方体对象\r\n      var cube = cubes[i];\r\n      // 在其父对象上调用scene.remove方法\r\n      cube.parent.remove(cube);\r\n      // 调用renderer.renderLists.dispose()方法\r\n      renderer.dispose();\r\n    }\r\n    // 清空数组\r\n    cubes = [];\r\n    graph = [];\r\n}\r\nfunction createCubes() {\r\n      // 创建一个名为cubes的数组，用于存储所有的立方体对象\r\n      \r\n      var geometry = new THREE.CubeGeometry(9,9,9);\r\n          var material = new THREE.MeshBasicMaterial( {color: 0xC0C0C0} );\r\n          for(var i=0;i<length/10;i++){\r\n               var nodeRow = [];\r\n               graph.push(nodeRow);\r\n              for(var j=0;j<length/10;j++){\r\n                  var salt=randomNum(1,7);\r\n                  if(salt>flex){\r\n                      nodeRow.push(1);\r\n                  }else{\r\n                      nodeRow.push(0);\r\n                  }\r\n                  if(salt<=flex){\t\t\t\t\t\r\n                      var cube = new THREE.Mesh( geometry, material );\r\n                      cube.position.set(10*j-length/2+5,5,10*i-length/2+5);\r\n                      scene.add(cube);\r\n                      // 将立方体对象添加到数组中\r\n                      cubes.push(cube);\r\n                  }\r\n              }\r\n          }\r\n}  "],"names":[],"version":3,"file":"index.52f2910e.js.map","sourceRoot":"/__parcel_source_root/"}